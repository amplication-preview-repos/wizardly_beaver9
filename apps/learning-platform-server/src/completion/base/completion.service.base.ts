/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Completion as PrismaCompletion,
  Badge as PrismaBadge,
  Student as PrismaStudent,
  Task as PrismaTask,
} from "@prisma/client";

export class CompletionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CompletionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.completion.count(args);
  }

  async completions(
    args: Prisma.CompletionFindManyArgs
  ): Promise<PrismaCompletion[]> {
    return this.prisma.completion.findMany(args);
  }
  async completion(
    args: Prisma.CompletionFindUniqueArgs
  ): Promise<PrismaCompletion | null> {
    return this.prisma.completion.findUnique(args);
  }
  async createCompletion(
    args: Prisma.CompletionCreateArgs
  ): Promise<PrismaCompletion> {
    return this.prisma.completion.create(args);
  }
  async updateCompletion(
    args: Prisma.CompletionUpdateArgs
  ): Promise<PrismaCompletion> {
    return this.prisma.completion.update(args);
  }
  async deleteCompletion(
    args: Prisma.CompletionDeleteArgs
  ): Promise<PrismaCompletion> {
    return this.prisma.completion.delete(args);
  }

  async findBadges(
    parentId: string,
    args: Prisma.BadgeFindManyArgs
  ): Promise<PrismaBadge[]> {
    return this.prisma.completion
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .badges(args);
  }

  async getStudent(parentId: string): Promise<PrismaStudent | null> {
    return this.prisma.completion
      .findUnique({
        where: { id: parentId },
      })
      .student();
  }

  async getTask(parentId: string): Promise<PrismaTask | null> {
    return this.prisma.completion
      .findUnique({
        where: { id: parentId },
      })
      .task();
  }
}
