/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CompletionService } from "../completion.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CompletionCreateInput } from "./CompletionCreateInput";
import { Completion } from "./Completion";
import { CompletionFindManyArgs } from "./CompletionFindManyArgs";
import { CompletionWhereUniqueInput } from "./CompletionWhereUniqueInput";
import { CompletionUpdateInput } from "./CompletionUpdateInput";
import { BadgeFindManyArgs } from "../../badge/base/BadgeFindManyArgs";
import { Badge } from "../../badge/base/Badge";
import { BadgeWhereUniqueInput } from "../../badge/base/BadgeWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CompletionControllerBase {
  constructor(
    protected readonly service: CompletionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Completion })
  @nestAccessControl.UseRoles({
    resource: "Completion",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCompletion(
    @common.Body() data: CompletionCreateInput
  ): Promise<Completion> {
    return await this.service.createCompletion({
      data: {
        ...data,

        student: data.student
          ? {
              connect: data.student,
            }
          : undefined,

        task: data.task
          ? {
              connect: data.task,
            }
          : undefined,
      },
      select: {
        completionDate: true,
        createdAt: true,
        id: true,

        student: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Completion] })
  @ApiNestedQuery(CompletionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Completion",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async completions(@common.Req() request: Request): Promise<Completion[]> {
    const args = plainToClass(CompletionFindManyArgs, request.query);
    return this.service.completions({
      ...args,
      select: {
        completionDate: true,
        createdAt: true,
        id: true,

        student: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Completion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Completion",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async completion(
    @common.Param() params: CompletionWhereUniqueInput
  ): Promise<Completion | null> {
    const result = await this.service.completion({
      where: params,
      select: {
        completionDate: true,
        createdAt: true,
        id: true,

        student: {
          select: {
            id: true,
          },
        },

        task: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Completion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Completion",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCompletion(
    @common.Param() params: CompletionWhereUniqueInput,
    @common.Body() data: CompletionUpdateInput
  ): Promise<Completion | null> {
    try {
      return await this.service.updateCompletion({
        where: params,
        data: {
          ...data,

          student: data.student
            ? {
                connect: data.student,
              }
            : undefined,

          task: data.task
            ? {
                connect: data.task,
              }
            : undefined,
        },
        select: {
          completionDate: true,
          createdAt: true,
          id: true,

          student: {
            select: {
              id: true,
            },
          },

          task: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Completion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Completion",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCompletion(
    @common.Param() params: CompletionWhereUniqueInput
  ): Promise<Completion | null> {
    try {
      return await this.service.deleteCompletion({
        where: params,
        select: {
          completionDate: true,
          createdAt: true,
          id: true,

          student: {
            select: {
              id: true,
            },
          },

          task: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/badges")
  @ApiNestedQuery(BadgeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Badge",
    action: "read",
    possession: "any",
  })
  async findBadges(
    @common.Req() request: Request,
    @common.Param() params: CompletionWhereUniqueInput
  ): Promise<Badge[]> {
    const query = plainToClass(BadgeFindManyArgs, request.query);
    const results = await this.service.findBadges(params.id, {
      ...query,
      select: {
        completion: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        image: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/badges")
  @nestAccessControl.UseRoles({
    resource: "Completion",
    action: "update",
    possession: "any",
  })
  async connectBadges(
    @common.Param() params: CompletionWhereUniqueInput,
    @common.Body() body: BadgeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      badges: {
        connect: body,
      },
    };
    await this.service.updateCompletion({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/badges")
  @nestAccessControl.UseRoles({
    resource: "Completion",
    action: "update",
    possession: "any",
  })
  async updateBadges(
    @common.Param() params: CompletionWhereUniqueInput,
    @common.Body() body: BadgeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      badges: {
        set: body,
      },
    };
    await this.service.updateCompletion({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/badges")
  @nestAccessControl.UseRoles({
    resource: "Completion",
    action: "update",
    possession: "any",
  })
  async disconnectBadges(
    @common.Param() params: CompletionWhereUniqueInput,
    @common.Body() body: BadgeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      badges: {
        disconnect: body,
      },
    };
    await this.service.updateCompletion({
      where: params,
      data,
      select: { id: true },
    });
  }
}
